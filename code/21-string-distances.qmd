---
title: "String distances"
format: html
---

When comparing strings of unequal length, you can use the concept of [edit distance](https://en.wikipedia.org/wiki/Edit_distance) to measure their similarity. 

The most common method to calculate edit distance is the Levenshtein distance, which measures the number of single-character edits (insertions, deletions, or substitutions) required to change one string into the other.

In your example, the distance between "bottle" and "battleship" can be computed as follows:
1. Substitute 'a' after the first character of "bottle" (1 operation)
2. Add 'ship' to the end of 'battle' (4 operations)

In total, it takes 5 operations to transform "bottle" into "battle", which is a substring of "battleship".

In R, you can use the `stringdist` package to compute the Levenshtein distance between strings. Here's a code snippet:

```{r}
library(stringdist)

# Define the strings
string1 <- "battle"
string2 <- "battleship"

# Calculate the Levenshtein distance
lev_distance <- stringdist(string1, string2, method = "lv")

# Print the result
cat("Levenshtein distance:", lev_distance)
```


Keep in mind that this will give you the distance between the two complete strings. In your case, you are specifically looking for a good match when one string is a substring of the other. To achieve that, you can calculate the Levenshtein distance for all possible substrings and choose the minimum distance.

Here's a code snippet for that:

```{r}

# Function to calculate minimum Levenshtein distance
min_lev_substring_distance <- function(string1, string2) {
  n <- nchar(string1)
  m <- nchar(string2)

  # Ensure that string1 is the shorter string
  if (m < n) {
    tmp <- string1
    string1 <- string2
    string2 <- tmp
    n <- m
    m <- nchar(string2)
  }

  min_distance <- Inf

  for (i in 1:(m - n + 1)) {
    substring2 <- substr(string2, i, i + n - 1)
    distance <- stringdist(string1, substring2, method = "lv")

    if (distance < min_distance) {
      min_distance <- distance
    }
  }

  return(min_distance)
}

# Calculate the minimum Levenshtein distance for substrings
min_lev_distance <- min_lev_substring_distance(string1, string2)

# Print the result
cat("Minimum Levenshtein distance for substrings:", min_lev_distance)
```

This code snippet will output the minimum Levenshtein distance for substrings, which is 1 in the given example.
