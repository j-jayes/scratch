---
title: "Data analysis exercise: Our World in Data Junior Data Scientist application"
format: html
date: 10-03-2024
---

## Purpose

To include: "age is a confounding factor".

You cannot compare crude mortality rate of two populations with different age structures.

Direct vs indirect age standardization.

Indirect age standardization - we use a standard population mortality rate to calculate the total number of deaths we would expect to see if our country of interest had the same same mortality rate as the standard population. Stanrdarzied mortlairt ratio (SMR) is the ratio of the observed number of deaths to the expected number of deaths.

Direct age standardization - we change the population structure of the country of interest to match the standard population. We then calculate the crude mortality rate for the country of interest using the new population structure. This is the age-standardized mortality rate.

### What is COPD?

Chronic obstructive pulmonary disease (COPD) is a type of obstructive lung disease characterized by long-term breathing problems and poor airflow. The main symptoms include shortness of breath and cough with sputum production.

The main cause of COPD, especially in developed countries, is tobacco smoking, while in developing areas, exposure to fumes from burning fuel for cooking and heating in poorly ventilated homes is a significant contributor.

Funny video about COPD: [I got bronchitis - ain't nobody got time for that!](https://www.youtube.com/watch?v=ydmPh4MXT3g)

## Data

We need to collect some additional data on the population structure of the USA and Uganda in order to calculate the crude rate from the age-specific rates.

### Population structure

We can download this from the UN World Population Prospects (2022) — Population Estimates 1950-2021 website. 

Specifically, we need the file containing "Total population (both sexes combined) by five-year age group. De facto population as of 1 July of the year indicated classified by five-year age groups (0-4, 5-9, 10-14, ..., 95-99, 100+). Data are presented in thousands."

```{python}
# downloaded the data to the data/owid folder
import pandas as pd
# read the file, skipping the data information at the top
df = pd.read_excel("../data/owid/WPP2022_POP_F02_1_POPULATION_5-YEAR_AGE_GROUPS_BOTH_SEXES.xlsx", sheet_name="Estimates", skiprows=16)

# remove * and , from column names and convert to snake case
df.columns = df.columns.str.replace("*", "").str.replace(",", "").str.strip().str.lower().str.replace(" ", "_")

# rename region_subregion_country_or_area to country
df.rename(columns={"region_subregion_country_or_area": "country"}, inplace=True)


# filter df such that iso3_alpha-code is USA and UGA
df_usa_uga = df[(df["iso3_alpha-code"] == "USA") | (df["iso3_alpha-code"] == "UGA")]

# select only year 2019
df_usa_uga_2019 = df_usa_uga[df_usa_uga["year"] == 2019]

# pivot data from wide to long format from 12th column onwards
id_vars = df_usa_uga_2019.columns[:11]

# Use melt function to pivot the DataFrame
df_usa_uga_2019_long = df_usa_uga_2019.melt(id_vars=id_vars, var_name='age_group', value_name='population')

# create a mapping from age_group to an index
age_group_mapping = {
    '0-4': 0,
    '5-9': 1,
    '10-14': 2,
    '15-19': 3,
    '20-24': 4,
    '25-29': 5,
    '30-34': 6,
    '35-39': 7,
    '40-44': 8,
    '45-49': 9,
    '50-54': 10,
    '55-59': 11,
    '60-64': 12,
    '65-69': 13,
    '70-74': 14,
    '75-79': 15,
    '80-84': 16,
    '85-89': 17,
    '90-94': 18,
    '95-99': 19,
    '100+': 20
}

# create a new column age_group_index
df_usa_uga_2019_long['age_group_index'] = df_usa_uga_2019_long['age_group'].map(age_group_mapping)

# rename age_group to age_group_label
df_usa_uga_2019_long.rename(columns={'age_group': 'age_group_label'}, inplace=True)

# make a plot of the population structure for USA and Uganda using the values from age_group_index on the x-axis and the labels from age_group_label on the x-axis and the population on the y-axis
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

# Separate data for each country
df_usa = df_usa_uga_2019_long[df_usa_uga_2019_long['country'] == 'United States of America']
df_uga = df_usa_uga_2019_long[df_usa_uga_2019_long['country'] == 'Uganda']

# Create a figure and axis
fig, ax = plt.subplots()

# Create horizontal bar plots for each country
# Note: For the USA, we make the population values negative to create the pyramid effect
ax.barh(df_usa['age_group_index'], -df_usa['population'], color='blue', label='USA')
ax.barh(df_uga['age_group_index'], df_uga['population'], color='red', label='Uganda')

# Set the y-tick labels to be the age_group_label values
ax.set_yticks(df_usa['age_group_index'])
ax.set_yticklabels(df_usa['age_group_label'])

# Set the title and labels
ax.set_title('Population Structure for USA and Uganda (2019)')
ax.set_ylabel('Age Group')
ax.set_xlabel('Population (in thousands)')

# Add a legend
ax.legend()

# Change x-axis labels to absolute values
labels = ax.get_xticks().tolist()
ax.set_xticklabels([str(np.abs(int(label))) for label in labels])

# Show the plot
plt.show()


# TODO turn into a population pyramid

```


In the age-specific death rates that we are provided, the top category is "85+". We need to aggregate the population data into the same age groups as the death rates, specifically:
- summing the population for the age groups 85-89, 90-94, 95-99, and 100+ into a single "85+" category.

It is stated in a footnote to Table 1 in XXX that "For purposes of comparison, the WHO Standard age group 85+ is an aggregate of the age groups 85-89, 90-94, 95-99 and 100+."


```{python}
# Summing the population for the age groups 85-89, 90-94, 95-99, and 100+ into a single "85+" category, aka age_group_index 17, 18, 19 and 20. 

# Assuming df_usa_uga_2019_long is your DataFrame
filtered_df = df_usa_uga_2019_long[df_usa_uga_2019_long['age_group_index'].isin([17, 18, 19, 20])]

# sum the population for the age groups 85-89, 90-94, 95-99, and 100+ into a single "85+" category in the filtered_df

grouped_df = filtered_df.groupby(['country', 'year']).agg({'population': 'sum'}).reset_index()

# Add the age_group_label column
grouped_df['age_group_label'] = '85+'

# Add the age_group_index column
grouped_df['age_group_index'] = 17

# Join the grouped data back to the original dataframe, after removing the old rows with concat
df_usa_uga_2019_long = pd.concat([df_usa_uga_2019_long[~df_usa_uga_2019_long['age_group_index'].isin([17, 18, 19, 20])], grouped_df])


# keep columns country, year, age_group_index, population, age_group_label
df_usa_uga_2019_filtered = df_usa_uga_2019_long[['country', 'year', 'age_group_index', 'population', 'age_group_label']]
```

Now we can calculate the crude death rate and the age-standardized death rate for the USA and Uganda.

We need to get the age-specific death rates for the USA and Uganda from the data provided on the [Notion site](https://owid.notion.site/Data-analysis-exercise-Our-World-in-Data-Junior-Data-Scientist-application-ab287a3c07264b4d91aadc436021b8c0#fd444d9f591e4d48abf0b58f0d95838e)

```{python}
url = "https://owid.notion.site/Data-analysis-exercise-Our-World-in-Data-Junior-Data-Scientist-application-ab287a3c07264b4d91aadc436021b8c0"

import requests
from bs4 import BeautifulSoup

# send a GET request to the URL
response = requests.get(url)

# get the table from the page where the class is table
soup = BeautifulSoup(response.text, 'html.parser')
table = soup.find_all('table', class_='table')



# read the table into a pandas DataFrame
df_death_rates = pd.read_html(str(table))[0]
```


```{python}

age_specific_death_rates = {
    'Age group (years)': ['0-4', '5-9', '10-14', '15-19', '20-24', '25-29', '30-34', '35-39', '40-44', '45-49', '50-54', '55-59', '60-64', '65-69', '70-74', '75-79', '80-84', '85+'],
    'Death rate, United States, 2019': [0.04, 0.02, 0.02, 0.02, 0.06, 0.11, 0.29, 0.56, 1.42, 4.00, 14.13, 37.22, 66.48, 108.66, 213.10, 333.06, 491.10, 894.45],
    'Death rate, Uganda, 2019': [0.40, 0.17, 0.07, 0.23, 0.38, 0.40, 0.75, 1.11, 2.04, 5.51, 13.26, 33.25, 69.62, 120.78, 229.88, 341.06, 529.31, 710.40]
}

df_age_specific_death_rates = pd.DataFrame(age_specific_death_rates)

# create a column caled age_group_index equal to the index
df_age_specific_death_rates['age_group_index'] = df_age_specific_death_rates.index

# rename Age group (years) to age_group_label
df_age_specific_death_rates.rename(columns={'Age group (years)': 'age_group_label'}, inplace=True)

# rename the columns Death rate, United States, 2019 and Death rate, Uganda, 2019 to United States of America and Uganda
df_age_specific_death_rates.rename(columns={'Death rate, United States, 2019': 'United States of America', 'Death rate, Uganda, 2019': 'Uganda'}, inplace=True)

# pivot the data from wide to long format
df_age_specific_death_rates_long = df_age_specific_death_rates.melt(id_vars=['age_group_label', 'age_group_index'], var_name='country', value_name='death_rate')

```


```{python}
# merge the death rates with the population data
df_merged = df_usa_uga_2019_filtered.merge(df_age_specific_death_rates_long, on=['country', 'age_group_index', 'age_group_label'])

# check that the merge did not drop any rows
assert df_merged.shape[0] == df_usa_uga_2019_filtered.shape[0]
```


Here's how you would calculate it:

Multiply the age-specific death rate by the population of each age group to get the total number of deaths for that age group.
Sum the total deaths across all age groups to get the overall number of deaths.
Sum the population across all age groups to get the overall population size.
Divide the total number of deaths by the total population size, and then multiply by 1,000 to convert the rate per 1,000 population.

```{python}
# calculate the number of deaths for each age group
df_merged['deaths'] = df_merged['population'] * df_merged['death_rate']

# total deaths by country
total_deaths = df_merged.groupby(['country', 'year']).agg({'deaths': 'sum'}).reset_index()

# total population by country
total_population = df_merged.groupby(['country', 'year']).agg({'population': 'sum'}).reset_index()

# divide the total deaths by the total population and multiply by 1000

# calculate the crude death rate by country
crude_death_rate = total_deaths.merge(total_population, on=['country', 'year'])
crude_death_rate['crude_death_rate'] = crude_death_rate['deaths'] / crude_death_rate['population'] * 1000

```

So we have a death rate per 100,000 people, and we have the number of people in the population in thousands. So we can calculate the crude death rate by multiplying the death rate by the population and then dividing by 100.

```{python}
# calculate the crude death rate by country
crude_death_rate = df_merged.groupby(['country', 'year']).apply(lambda x: (x['population'] * x['death_rate']).sum() / x['population'].sum() * 1000).reset_index(name='crude_death_rate')

```

## Metrics


### Crude death rate

Crude Death Rate is a simple measure that calculates the total number of deaths in a population over a specific time period, divided by the mid-year population of that area, often multiplied by a constant to make the rate per 1,000 or 100,000 people.

This rate gives a basic overview of the mortality within a population but doesn't account for differences in the age structure of the population.

### Age standardized death rate

Age-Standardized Death Rate (ASDR), on the other hand, adjusts for the age structure of the population. This is important because age is a significant risk factor for many diseases, and populations vary widely in their age distributions. Age-standardization allows for fair comparisons between groups that may have different age structures by applying the observed rates of mortality to a "standard population" with a known age structure.

## Analysis


```{python}

```